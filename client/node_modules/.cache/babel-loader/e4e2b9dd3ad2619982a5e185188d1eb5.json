{"ast":null,"code":"import { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { compose } from 'redux';\nimport { selectIsCollectionFetching } from '../../redux/shop/shop.selectors';\nimport WithSpinner from '../with-spinner/with-spinner.component';\nimport CollectionsOverview from './collections-overview.component';\nconst mapStateToProps = createStructuredSelector({\n  isLoading: selectIsCollectionFetching\n});\nconst CollectionsOverviewContainer = compose(connect(mapStateToProps), WithSpinner)(CollectionsOverview);\nexport default CollectionsOverviewContainer; // composeを使わない通常の記載： -- 追記：2020.01.19\n// 上記 compose() を利用した表現を理解するためにメモを残す。\n// const CollectionsOverviewContainer = connect( mapStateToProps )( WithSpinner( CollectionsOverview ) );\n// 商品一覧データをFireStoreから非同期でロードする必要がある。\n// そのため「ローディング状態」を Redux に一時的に保持しておいて、それを逐次チェックする処理としている。\n// ここでの処理は、mapStateToProps()でRedux - Store に接続して、データのローディング状態 selectIsCollectionFetching\n// を引き出して、それを <WithSpinner>コンポーネントに渡して、\n// その内部で2つのコンポーネント < Spinner > と < CollectionOverview > とを切り替えている。\n// WithSpinner()は高階関数(HOC) なので、その内側で CollectionsOverview() コンポーネント が動いている形である。\n// メモ：　{ isLoading: selectIsCollectionFetching }というオブジェクト形式","map":{"version":3,"sources":["/Users/di-shiro/Documents/react_study/react_Andrei/crwn-clothing/client/src/components/collections-overview/collections-overview.container.jsx"],"names":["connect","createStructuredSelector","compose","selectIsCollectionFetching","WithSpinner","CollectionsOverview","mapStateToProps","isLoading","CollectionsOverviewContainer"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA,SAASC,0BAAT,QAA2C,iCAA3C;AACA,OAAOC,WAAP,MAAwB,wCAAxB;AACA,OAAOC,mBAAP,MAAgC,kCAAhC;AAEA,MAAMC,eAAe,GAAGL,wBAAwB,CAAC;AAC/CM,EAAAA,SAAS,EAAEJ;AADoC,CAAD,CAAhD;AAIA,MAAMK,4BAA4B,GAAGN,OAAO,CAC1CF,OAAO,CAACM,eAAD,CADmC,EAE1CF,WAF0C,CAAP,CAGnCC,mBAHmC,CAArC;AAKA,eAAeG,4BAAf,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { compose } from 'redux';\n\nimport { selectIsCollectionFetching } from '../../redux/shop/shop.selectors';\nimport WithSpinner from '../with-spinner/with-spinner.component';\nimport CollectionsOverview from './collections-overview.component';\n\nconst mapStateToProps = createStructuredSelector({\n  isLoading: selectIsCollectionFetching\n});\n\nconst CollectionsOverviewContainer = compose(\n  connect(mapStateToProps),\n  WithSpinner\n)(CollectionsOverview);\n\nexport default CollectionsOverviewContainer;\n\n// composeを使わない通常の記載： -- 追記：2020.01.19\n// 上記 compose() を利用した表現を理解するためにメモを残す。\n// const CollectionsOverviewContainer = connect( mapStateToProps )( WithSpinner( CollectionsOverview ) );\n\n// 商品一覧データをFireStoreから非同期でロードする必要がある。\n// そのため「ローディング状態」を Redux に一時的に保持しておいて、それを逐次チェックする処理としている。\n// ここでの処理は、mapStateToProps()でRedux - Store に接続して、データのローディング状態 selectIsCollectionFetching\n// を引き出して、それを <WithSpinner>コンポーネントに渡して、\n// その内部で2つのコンポーネント < Spinner > と < CollectionOverview > とを切り替えている。\n// WithSpinner()は高階関数(HOC) なので、その内側で CollectionsOverview() コンポーネント が動いている形である。\n\n// メモ：　{ isLoading: selectIsCollectionFetching }というオブジェクト形式\n"]},"metadata":{},"sourceType":"module"}